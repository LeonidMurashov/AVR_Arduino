;  ASM code generated by mikroVirtualMachine for PIC - V. 8.2.0.0
;  Date/Time: 4/6/2008 15:00:53
;  Info: http://www.mikroe.com


; ADDRESS	OPCODE	ASM
; ----------------------------------------------
$0000	$2804			GOTO	_main
$02A3	$	_Delay_1us:
;delays.c,7 :: 		void Delay_1us() {
;delays.c,8 :: 		Delay_us(1);
$02A3	$3001			MOVLW	1
$02A4	$1303			BCF	STATUS, RP1
$02A5	$1283			BCF	STATUS, RP0
$02A6	$00FA			MOVWF	STACK_10
$02A7	$0BFA			DECFSZ	STACK_10, F
$02A8	$2AA7			GOTO	$-1
$02A9	$0000			NOP
;delays.c,9 :: 		}
$02AA	$0008			RETURN
$0289	$	_Delay_5500us:
;delays.c,31 :: 		void Delay_5500us() {
;delays.c,32 :: 		Delay_us(5500);
$0289	$3024			MOVLW	36
$028A	$1303			BCF	STATUS, RP1
$028B	$1283			BCF	STATUS, RP0
$028C	$00FB			MOVWF	STACK_11
$028D	$30FF			MOVLW	255
$028E	$00FA			MOVWF	STACK_10
$028F	$0BFB			DECFSZ	STACK_11, F
$0290	$2A92			GOTO	$+2
$0291	$2A95			GOTO	$+4
$0292	$0BFA			DECFSZ	STACK_10, F
$0293	$2A92			GOTO	$-1
$0294	$2A8F			GOTO	$-5
$0295	$309E			MOVLW	158
$0296	$00FA			MOVWF	STACK_10
$0297	$0BFA			DECFSZ	STACK_10, F
$0298	$2A97			GOTO	$-1
;delays.c,33 :: 		}
$0299	$0008			RETURN
$02AB	$	_Delay_50us:
;delays.c,19 :: 		void Delay_50us() {
;delays.c,20 :: 		Delay_us(50);
$02AB	$3053			MOVLW	83
$02AC	$1303			BCF	STATUS, RP1
$02AD	$1283			BCF	STATUS, RP0
$02AE	$00FA			MOVWF	STACK_10
$02AF	$0BFA			DECFSZ	STACK_10, F
$02B0	$2AAF			GOTO	$-1
;delays.c,21 :: 		}
$02B1	$0008			RETURN
$01EB	$	_Lcd_Cmd:
$01EB	$1303			BCF	STATUS, RP1
$01EC	$1283			BCF	STATUS, RP0
$01ED	$0820			MOVF	LCD_port_address, 0
$01EE	$0084			MOVWF	FSR
$01EF	$0856			MOVF	FARG_Lcd_Cmd+0, 0
$01F0	$1903			BTFSC	STATUS, Z
$01F1	$29F2			GOTO	L_Lcd_Cmd_0
$01F2	$	L_Lcd_Cmd_0:
$01F2	$1180			BCF	INDF, ___ENABLE
$01F3	$1100			BCF	INDF, ___RS
$01F4	$1380			BCF	INDF, ___DB7
$01F5	$1300			BCF	INDF, ___DB6
$01F6	$1280			BCF	INDF, ___DB5
$01F7	$1200			BCF	INDF, ___DB4
$01F8	$1BD6			BTFSC	FARG_Lcd_Cmd+0, 7
$01F9	$1780			BSF	INDF, ___DB7
$01FA	$1B56			BTFSC	FARG_Lcd_Cmd+0, 6
$01FB	$1700			BSF	INDF, ___DB6
$01FC	$1AD6			BTFSC	FARG_Lcd_Cmd+0, 5
$01FD	$1680			BSF	INDF, ___DB5
$01FE	$1A56			BTFSC	FARG_Lcd_Cmd+0, 4
$01FF	$1600			BSF	INDF, ___DB4
$0200	$0821			MOVF	LCD_cmd_status, 0
$0201	$1903			BTFSC	STATUS, Z
$0202	$2A05			GOTO	L_Lcd_Cmd_1
$0203	$1100			BCF	INDF, ___RS
$0204	$2A06			GOTO	L_Lcd_Cmd_2
$0205	$	L_Lcd_Cmd_1:
$0205	$1500			BSF	INDF, ___RS
$0206	$	L_Lcd_Cmd_2:
$0206	$1580			BSF	INDF, ___ENABLE
$0207	$22A3			CALL	_Delay_1us
$0208	$0856			MOVF	FARG_Lcd_Cmd+0, 0
$0209	$1903			BTFSC	STATUS, Z
$020A	$2A0B			GOTO	L_Lcd_Cmd_3
$020B	$	L_Lcd_Cmd_3:
$020B	$1180			BCF	INDF, ___ENABLE
$020C	$1100			BCF	INDF, ___RS
$020D	$1380			BCF	INDF, ___DB7
$020E	$1300			BCF	INDF, ___DB6
$020F	$1280			BCF	INDF, ___DB5
$0210	$1200			BCF	INDF, ___DB4
$0211	$19D6			BTFSC	FARG_Lcd_Cmd+0, 3
$0212	$1780			BSF	INDF, ___DB7
$0213	$1956			BTFSC	FARG_Lcd_Cmd+0, 2
$0214	$1700			BSF	INDF, ___DB6
$0215	$18D6			BTFSC	FARG_Lcd_Cmd+0, 1
$0216	$1680			BSF	INDF, ___DB5
$0217	$1856			BTFSC	FARG_Lcd_Cmd+0, 0
$0218	$1600			BSF	INDF, ___DB4
$0219	$0821			MOVF	LCD_cmd_status, 0
$021A	$1903			BTFSC	STATUS, Z
$021B	$2A1E			GOTO	L_Lcd_Cmd_4
$021C	$1100			BCF	INDF, ___RS
$021D	$2A1F			GOTO	L_Lcd_Cmd_5
$021E	$	L_Lcd_Cmd_4:
$021E	$1500			BSF	INDF, ___RS
$021F	$	L_Lcd_Cmd_5:
$021F	$1580			BSF	INDF, ___ENABLE
$0220	$22A3			CALL	_Delay_1us
$0221	$1180			BCF	INDF, ___ENABLE
$0222	$0821			MOVF	LCD_cmd_status, 0
$0223	$1903			BTFSC	STATUS, Z
$0224	$2A27			GOTO	L_Lcd_Cmd_6
$0225	$2289			CALL	_Delay_5500us
$0226	$2A28			GOTO	L_Lcd_Cmd_7
$0227	$	L_Lcd_Cmd_6:
$0227	$22AB			CALL	_Delay_50us
$0228	$	L_Lcd_Cmd_7:
$0228	$0008			RETURN
$029A	$	_Lcd_Chr_CP:
$029A	$1303			BCF	STATUS, RP1
$029B	$1283			BCF	STATUS, RP0
$029C	$01A1			CLRF	LCD_cmd_status, 1
$029D	$0855			MOVF	FARG_Lcd_Chr_CP+0, 0
$029E	$00D6			MOVWF	FARG_Lcd_Cmd+0
$029F	$21EB			CALL	_Lcd_Cmd
$02A0	$3001			MOVLW	1
$02A1	$00A1			MOVWF	LCD_cmd_status
$02A2	$0008			RETURN
$026C	$	_Div_16x16_U:
$026C	$1303			BCF	STATUS, RP1
$026D	$1283			BCF	STATUS, RP0
$026E	$01F8			CLRF	STACK_8
$026F	$01F9			CLRF	STACK_9
$0270	$3010			MOVLW	16
$0271	$00FC			MOVWF	STACK_12
$0272	$0D71			RLF	STACK_1, W
$0273	$0DF8			RLF	STACK_8, F
$0274	$0DF9			RLF	STACK_9, F
$0275	$0874			MOVF	STACK_4, W
$0276	$02F8			SUBWF	STACK_8, F
$0277	$0875			MOVF	STACK_5, W
$0278	$1C03			BTFSS	STATUS, C
$0279	$0F75			INCFSZ	STACK_5, W
$027A	$02F9			SUBWF	STACK_9, F
$027B	$1803			BTFSC	STATUS, C
$027C	$2A84			GOTO	$+8
$027D	$0874			MOVF	STACK_4, W
$027E	$07F8			ADDWF	STACK_8, F
$027F	$0875			MOVF	STACK_5, W
$0280	$1803			BTFSC	STATUS, C
$0281	$0F75			INCFSZ	STACK_5, W
$0282	$07F9			ADDWF	STACK_9, F
$0283	$1003			BCF	STATUS, C
$0284	$0DF0			RLF	STACK_0, F
$0285	$0DF1			RLF	STACK_1, F
$0286	$0BFC			DECFSZ	STACK_12, F
$0287	$2A72			GOTO	$-21
$0288	$0008			RETURN
$014A	$	_Lcd_Init:
$014A	$2289			CALL	_Delay_5500us
$014B	$2289			CALL	_Delay_5500us
$014C	$2289			CALL	_Delay_5500us
$014D	$0850			MOVF	FARG_Lcd_Init+0, 0
$014E	$00A0			MOVWF	LCD_port_address
$014F	$0850			MOVF	FARG_Lcd_Init+0, 0
$0150	$0084			MOVWF	FSR
$0151	$1784			BSF	FSR, 7
$0152	$1180			BCF	INDF, ___ENABLE
$0153	$1100			BCF	INDF, ___RS
$0154	$1000			BCF	INDF, ___RW
$0155	$1380			BCF	INDF, ___DB7
$0156	$1300			BCF	INDF, ___DB6
$0157	$1280			BCF	INDF, ___DB5
$0158	$1200			BCF	INDF, ___DB4
$0159	$1384			BCF	FSR, 7
$015A	$1180			BCF	INDF, ___ENABLE
$015B	$1100			BCF	INDF, ___RS
$015C	$1000			BCF	INDF, ___RW
$015D	$1380			BCF	INDF, ___DB7
$015E	$1300			BCF	INDF, ___DB6
$015F	$1280			BCF	INDF, ___DB5
$0160	$1200			BCF	INDF, ___DB4
$0161	$1680			BSF	INDF, ___DB5
$0162	$1600			BSF	INDF, ___DB4
$0163	$1580			BSF	INDF, ___ENABLE
$0164	$1180			BCF	INDF, ___ENABLE
$0165	$2289			CALL	_Delay_5500us
$0166	$1580			BSF	INDF, ___ENABLE
$0167	$1180			BCF	INDF, ___ENABLE
$0168	$2289			CALL	_Delay_5500us
$0169	$1580			BSF	INDF, ___ENABLE
$016A	$1180			BCF	INDF, ___ENABLE
$016B	$2289			CALL	_Delay_5500us
$016C	$1680			BSF	INDF, ___DB5
$016D	$1200			BCF	INDF, ___DB4
$016E	$1580			BSF	INDF, ___ENABLE
$016F	$1180			BCF	INDF, ___ENABLE
$0170	$2289			CALL	_Delay_5500us
$0171	$0180			CLRF	INDF
$0172	$1680			BSF	INDF, ___DB5
$0173	$1580			BSF	INDF, ___ENABLE
$0174	$1180			BCF	INDF, ___ENABLE
$0175	$0180			CLRF	INDF
$0176	$1780			BSF	INDF, ___DB7
$0177	$1580			BSF	INDF, ___ENABLE
$0178	$1180			BCF	INDF, ___ENABLE
$0179	$2289			CALL	_Delay_5500us
$017A	$0180			CLRF	INDF
$017B	$1600			BSF	INDF, ___DB4
$017C	$1580			BSF	INDF, ___ENABLE
$017D	$1180			BCF	INDF, ___ENABLE
$017E	$0180			CLRF	INDF
$017F	$1580			BSF	INDF, ___ENABLE
$0180	$1180			BCF	INDF, ___ENABLE
$0181	$2289			CALL	_Delay_5500us
$0182	$0180			CLRF	INDF
$0183	$1580			BSF	INDF, ___ENABLE
$0184	$1180			BCF	INDF, ___ENABLE
$0185	$1600			BSF	INDF, ___DB4
$0186	$1580			BSF	INDF, ___ENABLE
$0187	$1180			BCF	INDF, ___ENABLE
$0188	$2289			CALL	_Delay_5500us
$0189	$0180			CLRF	INDF
$018A	$1580			BSF	INDF, ___ENABLE
$018B	$1180			BCF	INDF, ___ENABLE
$018C	$1600			BSF	INDF, ___DB4
$018D	$1680			BSF	INDF, ___DB5
$018E	$1700			BSF	INDF, ___DB6
$018F	$1780			BSF	INDF, ___DB7
$0190	$1580			BSF	INDF, ___ENABLE
$0191	$1180			BCF	INDF, ___ENABLE
$0192	$2289			CALL	_Delay_5500us
$0193	$3001			MOVLW	1
$0194	$00A1			MOVWF	LCD_cmd_status
$0195	$0008			RETURN
$0229	$	_LCD_Out:
$0229	$2A3B			GOTO	L_LCD_Out_17
$022A	$	L_LCD_Out_19:
$022A	$3080			MOVLW	128
$022B	$1303			BCF	STATUS, RP1
$022C	$1283			BCF	STATUS, RP0
$022D	$00D0			MOVWF	FARG_LCD_Out+0
$022E	$2A4E			GOTO	L_LCD_Out_18
$022F	$	L_LCD_Out_20:
$022F	$30C0			MOVLW	192
$0230	$00D0			MOVWF	FARG_LCD_Out+0
$0231	$2A4E			GOTO	L_LCD_Out_18
$0232	$	L_LCD_Out_21:
$0232	$3094			MOVLW	148
$0233	$00D0			MOVWF	FARG_LCD_Out+0
$0234	$2A4E			GOTO	L_LCD_Out_18
$0235	$	L_LCD_Out_22:
$0235	$30D4			MOVLW	212
$0236	$00D0			MOVWF	FARG_LCD_Out+0
$0237	$2A4E			GOTO	L_LCD_Out_18
$0238	$	L_LCD_Out_23:
$0238	$3080			MOVLW	128
$0239	$00D0			MOVWF	FARG_LCD_Out+0
$023A	$2A4E			GOTO	L_LCD_Out_18
$023B	$	L_LCD_Out_17:
$023B	$1303			BCF	STATUS, RP1
$023C	$1283			BCF	STATUS, RP0
$023D	$0850			MOVF	FARG_LCD_Out+0, 0
$023E	$3A01			XORLW	1
$023F	$1903			BTFSC	STATUS, Z
$0240	$2A2A			GOTO	L_LCD_Out_19
$0241	$0850			MOVF	FARG_LCD_Out+0, 0
$0242	$3A02			XORLW	2
$0243	$1903			BTFSC	STATUS, Z
$0244	$2A2F			GOTO	L_LCD_Out_20
$0245	$0850			MOVF	FARG_LCD_Out+0, 0
$0246	$3A03			XORLW	3
$0247	$1903			BTFSC	STATUS, Z
$0248	$2A32			GOTO	L_LCD_Out_21
$0249	$0850			MOVF	FARG_LCD_Out+0, 0
$024A	$3A04			XORLW	4
$024B	$1903			BTFSC	STATUS, Z
$024C	$2A35			GOTO	L_LCD_Out_22
$024D	$2A38			GOTO	L_LCD_Out_23
$024E	$	L_LCD_Out_18:
$024E	$0351			DECF	FARG_LCD_Out+1, 0
$024F	$00F0			MOVWF	STACK_0
$0250	$0850			MOVF	FARG_LCD_Out+0, 0
$0251	$07F0			ADDWF	STACK_0, 1
$0252	$0870			MOVF	STACK_0, 0
$0253	$00D0			MOVWF	FARG_LCD_Out+0
$0254	$0870			MOVF	STACK_0, 0
$0255	$00D6			MOVWF	FARG_Lcd_Cmd+0
$0256	$21EB			CALL	_Lcd_Cmd
$0257	$01A1			CLRF	LCD_cmd_status, 1
$0258	$01D3			CLRF	LCD_Out_i_L0, 1
$0259	$	L_LCD_Out_24:
$0259	$0853			MOVF	LCD_Out_i_L0, 0
$025A	$0752			ADDWF	FARG_LCD_Out+2, 0
$025B	$0084			MOVWF	FSR
$025C	$0800			MOVF	INDF, 0
$025D	$00F0			MOVWF	STACK_0
$025E	$0870			MOVF	STACK_0, 0
$025F	$1903			BTFSC	STATUS, Z
$0260	$2A69			GOTO	L_LCD_Out_25
$0261	$0853			MOVF	LCD_Out_i_L0, 0
$0262	$0752			ADDWF	FARG_LCD_Out+2, 0
$0263	$0084			MOVWF	FSR
$0264	$0800			MOVF	INDF, 0
$0265	$00D5			MOVWF	FARG_Lcd_Chr_CP+0
$0266	$229A			CALL	_Lcd_Chr_CP
$0267	$0AD3			INCF	LCD_Out_i_L0, 1
$0268	$2A59			GOTO	L_LCD_Out_24
$0269	$	L_LCD_Out_25:
$0269	$3001			MOVLW	1
$026A	$00A1			MOVWF	LCD_cmd_status
$026B	$0008			RETURN
$00C2	$	_Adc_Rd:
;ReflectTest.c,7 :: 		int Adc_Rd(char ch)                // Low 8 Channel ADC Read
;ReflectTest.c,10 :: 		if ((ch>=0) && (ch<=3))       // CH0-CH3
$00C2	$3000			MOVLW	0
$00C3	$1303			BCF	STATUS, RP1
$00C4	$1283			BCF	STATUS, RP0
$00C5	$0250			SUBWF	FARG_Adc_Rd+0, 0
$00C6	$1C03			BTFSS	STATUS, C
$00C7	$28DB			GOTO	L_Adc_Rd_2
$00C8	$0850			MOVF	FARG_Adc_Rd+0, 0
$00C9	$3C03			SUBLW	3
$00CA	$1C03			BTFSS	STATUS, C
$00CB	$28DB			GOTO	L_Adc_Rd_2
$00CC	$	L10_ex_L_Adc_Rd_2:
;ReflectTest.c,11 :: 		TRISA |= (1<<ch);
$00CC	$0850			MOVF	FARG_Adc_Rd+0, 0
$00CD	$00F2			MOVWF	STACK_2
$00CE	$3001			MOVLW	1
$00CF	$00F0			MOVWF	STACK_0
$00D0	$0872			MOVF	STACK_2, 0
$00D1	$	L_Adc_Rd_15:
$00D1	$1903			BTFSC	STATUS, Z
$00D2	$28D7			GOTO	L_Adc_Rd_16
$00D3	$0DF0			RLF	STACK_0, 1
$00D4	$1070			BCF	STACK_0, 0
$00D5	$3FFF			ADDLW	255
$00D6	$28D1			GOTO	L_Adc_Rd_15
$00D7	$	L_Adc_Rd_16:
$00D7	$0870			MOVF	STACK_0, 0
$00D8	$1683			BSF	STATUS, RP0
$00D9	$0485			IORWF	TRISA, 1
$00DA	$28FD			GOTO	L_Adc_Rd_3
$00DB	$	L_Adc_Rd_2:
;ReflectTest.c,12 :: 		else if (ch==4)               // CH4
$00DB	$1283			BCF	STATUS, RP0
$00DC	$0850			MOVF	FARG_Adc_Rd+0, 0
$00DD	$3A04			XORLW	4
$00DE	$1D03			BTFSS	STATUS, Z
$00DF	$28E3			GOTO	L_Adc_Rd_4
;ReflectTest.c,13 :: 		TRISA |= 0x20;
$00E0	$1683			BSF	STATUS, RP0
$00E1	$1685			BSF	TRISA, 5
$00E2	$28FD			GOTO	L_Adc_Rd_5
$00E3	$	L_Adc_Rd_4:
;ReflectTest.c,14 :: 		else if ((ch>=5) && (ch<=7))  // CH5-CH7
$00E3	$3005			MOVLW	5
$00E4	$1283			BCF	STATUS, RP0
$00E5	$0250			SUBWF	FARG_Adc_Rd+0, 0
$00E6	$1C03			BTFSS	STATUS, C
$00E7	$28FD			GOTO	L_Adc_Rd_8
$00E8	$0850			MOVF	FARG_Adc_Rd+0, 0
$00E9	$3C07			SUBLW	7
$00EA	$1C03			BTFSS	STATUS, C
$00EB	$28FD			GOTO	L_Adc_Rd_8
$00EC	$	L33_ex_L_Adc_Rd_8:
;ReflectTest.c,15 :: 		TRISE |= (1<<(ch-5));
$00EC	$3005			MOVLW	5
$00ED	$0250			SUBWF	FARG_Adc_Rd+0, 0
$00EE	$00F0			MOVWF	STACK_0
$00EF	$0870			MOVF	STACK_0, 0
$00F0	$00F2			MOVWF	STACK_2
$00F1	$3001			MOVLW	1
$00F2	$00F0			MOVWF	STACK_0
$00F3	$0872			MOVF	STACK_2, 0
$00F4	$	L_Adc_Rd_17:
$00F4	$1903			BTFSC	STATUS, Z
$00F5	$28FA			GOTO	L_Adc_Rd_18
$00F6	$0DF0			RLF	STACK_0, 1
$00F7	$1070			BCF	STACK_0, 0
$00F8	$3FFF			ADDLW	255
$00F9	$28F4			GOTO	L_Adc_Rd_17
$00FA	$	L_Adc_Rd_18:
$00FA	$0870			MOVF	STACK_0, 0
$00FB	$1683			BSF	STATUS, RP0
$00FC	$0489			IORWF	TRISE, 1
$00FD	$	L_Adc_Rd_8:
$00FD	$	L_Adc_Rd_5:
$00FD	$	L_Adc_Rd_3:
;ReflectTest.c,16 :: 		ANSEL |=(1<<ch);              // set Channel to Analog
$00FD	$1303			BCF	STATUS, RP1
$00FE	$1683			BSF	STATUS, RP0
$00FF	$1283			BCF	STATUS, RP0
$0100	$0850			MOVF	FARG_Adc_Rd+0, 0
$0101	$00F2			MOVWF	STACK_2
$0102	$3001			MOVLW	1
$0103	$00F0			MOVWF	STACK_0
$0104	$0872			MOVF	STACK_2, 0
$0105	$	L_Adc_Rd_19:
$0105	$1903			BTFSC	STATUS, Z
$0106	$290B			GOTO	L_Adc_Rd_20
$0107	$0DF0			RLF	STACK_0, 1
$0108	$1070			BCF	STACK_0, 0
$0109	$3FFF			ADDLW	255
$010A	$2905			GOTO	L_Adc_Rd_19
$010B	$	L_Adc_Rd_20:
$010B	$0870			MOVF	STACK_0, 0
$010C	$1703			BSF	STATUS, RP1
$010D	$1683			BSF	STATUS, RP0
$010E	$0488			IORWF	ANSEL, 1
;ReflectTest.c,17 :: 		ADCON0 = (0xC1 + (ch*4));     // Select ADC Channel
$010F	$3002			MOVLW	2
$0110	$00F4			MOVWF	STACK_4
$0111	$1303			BCF	STATUS, RP1
$0112	$1283			BCF	STATUS, RP0
$0113	$0850			MOVF	FARG_Adc_Rd+0, 0
$0114	$00F0			MOVWF	STACK_0
$0115	$0874			MOVF	STACK_4, 0
$0116	$	L_Adc_Rd_21:
$0116	$1903			BTFSC	STATUS, Z
$0117	$291C			GOTO	L_Adc_Rd_22
$0118	$0DF0			RLF	STACK_0, 1
$0119	$1070			BCF	STACK_0, 0
$011A	$3FFF			ADDLW	255
$011B	$2916			GOTO	L_Adc_Rd_21
$011C	$	L_Adc_Rd_22:
$011C	$0870			MOVF	STACK_0, 0
$011D	$3FC1			ADDLW	193
$011E	$009F			MOVWF	ADCON0
;ReflectTest.c,18 :: 		Delay_us(10);                 // Acquisiton delay
$011F	$3010			MOVLW	16
$0120	$00FA			MOVWF	STACK_10
$0121	$0BFA			DECFSZ	STACK_10, F
$0122	$2921			GOTO	$-1
$0123	$0000			NOP
;ReflectTest.c,19 :: 		ADCON0.GO=1;                  // Start conversion
$0124	$149F			BSF	ADCON0, 1
;ReflectTest.c,20 :: 		while(ADCON0.GO);             // conversion done?
$0125	$	L_Adc_Rd_9:
$0125	$189F			BTFSC	ADCON0, 1
$0126	$2925			GOTO	L_Adc_Rd_9
$0127	$	L_Adc_Rd_10:
;ReflectTest.c,21 :: 		dat = (ADRESH*4)+(ADRESL/64); // Sum highbyte and lowbyte
$0127	$3002			MOVLW	2
$0128	$00F4			MOVWF	STACK_4
$0129	$081E			MOVF	ADRESH, 0
$012A	$00D1			MOVWF	FLOC_Adc_Rd+0
$012B	$01D2			CLRF	FLOC_Adc_Rd+1
$012C	$0874			MOVF	STACK_4, 0
$012D	$	L_Adc_Rd_23:
$012D	$1903			BTFSC	STATUS, Z
$012E	$2934			GOTO	L_Adc_Rd_24
$012F	$0DD1			RLF	FLOC_Adc_Rd+0, 1
$0130	$0DD2			RLF	FLOC_Adc_Rd+1, 1
$0131	$1051			BCF	FLOC_Adc_Rd+0, 0
$0132	$3FFF			ADDLW	255
$0133	$292D			GOTO	L_Adc_Rd_23
$0134	$	L_Adc_Rd_24:
$0134	$3006			MOVLW	6
$0135	$00F4			MOVWF	STACK_4
$0136	$1683			BSF	STATUS, RP0
$0137	$081E			MOVF	ADRESL, 0
$0138	$00F0			MOVWF	STACK_0
$0139	$0874			MOVF	STACK_4, 0
$013A	$	L_Adc_Rd_25:
$013A	$1903			BTFSC	STATUS, Z
$013B	$2940			GOTO	L_Adc_Rd_26
$013C	$0CF0			RRF	STACK_0, 1
$013D	$13F0			BCF	STACK_0, 7
$013E	$3FFF			ADDLW	255
$013F	$293A			GOTO	L_Adc_Rd_25
$0140	$	L_Adc_Rd_26:
$0140	$3000			MOVLW	0
$0141	$00F1			MOVWF	STACK_0+1
$0142	$1283			BCF	STATUS, RP0
$0143	$0851			MOVF	FLOC_Adc_Rd+0, 0
$0144	$07F0			ADDWF	STACK_0, 1
$0145	$0852			MOVF	FLOC_Adc_Rd+1, 0
$0146	$1803			BTFSC	STATUS, C
$0147	$3F01			ADDLW	1
$0148	$07F1			ADDWF	STACK_0+1, 1
;ReflectTest.c,22 :: 		return dat;                   // Return Value
;ReflectTest.c,23 :: 		}
$0149	$0008			RETURN
$0196	$	_WordToStr:
$0196	$1303			BCF	STATUS, RP1
$0197	$1283			BCF	STATUS, RP0
$0198	$0852			MOVF	FARG_WordToStr+2, 0
$0199	$0084			MOVWF	FSR
$019A	$3020			MOVLW	32
$019B	$0080			MOVWF	INDF
$019C	$0A52			INCF	FARG_WordToStr+2, 0
$019D	$00F0			MOVWF	STACK_0
$019E	$0870			MOVF	STACK_0, 0
$019F	$0084			MOVWF	FSR
$01A0	$3020			MOVLW	32
$01A1	$0080			MOVWF	INDF
$01A2	$3002			MOVLW	2
$01A3	$0752			ADDWF	FARG_WordToStr+2, 0
$01A4	$00F0			MOVWF	STACK_0
$01A5	$0870			MOVF	STACK_0, 0
$01A6	$0084			MOVWF	FSR
$01A7	$3020			MOVLW	32
$01A8	$0080			MOVWF	INDF
$01A9	$3003			MOVLW	3
$01AA	$0752			ADDWF	FARG_WordToStr+2, 0
$01AB	$00F0			MOVWF	STACK_0
$01AC	$0870			MOVF	STACK_0, 0
$01AD	$0084			MOVWF	FSR
$01AE	$3020			MOVLW	32
$01AF	$0080			MOVWF	INDF
$01B0	$3004			MOVLW	4
$01B1	$0752			ADDWF	FARG_WordToStr+2, 0
$01B2	$00F0			MOVWF	STACK_0
$01B3	$0870			MOVF	STACK_0, 0
$01B4	$0084			MOVWF	FSR
$01B5	$3030			MOVLW	48
$01B6	$0080			MOVWF	INDF
$01B7	$3005			MOVLW	5
$01B8	$0752			ADDWF	FARG_WordToStr+2, 0
$01B9	$00F0			MOVWF	STACK_0
$01BA	$0870			MOVF	STACK_0, 0
$01BB	$0084			MOVWF	FSR
$01BC	$0180			CLRF	INDF, 1
$01BD	$3004			MOVLW	4
$01BE	$00D3			MOVWF	WordToStr_pos_L0
$01BF	$	L_WordToStr_4:
$01BF	$0851			MOVF	FARG_WordToStr+1, 0
$01C0	$3C00			SUBLW	0
$01C1	$1D03			BTFSS	STATUS, Z
$01C2	$29C5			GOTO	L_WordToStr_51
$01C3	$0850			MOVF	FARG_WordToStr+0, 0
$01C4	$3C00			SUBLW	0
$01C5	$	L_WordToStr_51:
$01C5	$1803			BTFSC	STATUS, C
$01C6	$29EA			GOTO	L_WordToStr_5
$01C7	$0853			MOVF	WordToStr_pos_L0, 0
$01C8	$0752			ADDWF	FARG_WordToStr+2, 0
$01C9	$00D4			MOVWF	FLOC_WordToStr+1
$01CA	$300A			MOVLW	10
$01CB	$00F4			MOVWF	STACK_4
$01CC	$01F5			CLRF	STACK_4+1
$01CD	$0850			MOVF	FARG_WordToStr+0, 0
$01CE	$00F0			MOVWF	STACK_0
$01CF	$0851			MOVF	FARG_WordToStr+1, 0
$01D0	$00F1			MOVWF	STACK_0+1
$01D1	$226C			CALL	_div_16x16_u
$01D2	$0878			MOVF	STACK_8, 0
$01D3	$00F0			MOVWF	STACK_0
$01D4	$0879			MOVF	STACK_9, 0
$01D5	$00F1			MOVWF	STACK_1
$01D6	$3030			MOVLW	48
$01D7	$07F0			ADDWF	STACK_0, 1
$01D8	$0854			MOVF	FLOC_WordToStr+1, 0
$01D9	$0084			MOVWF	FSR
$01DA	$0870			MOVF	STACK_0, 0
$01DB	$0080			MOVWF	INDF
$01DC	$300A			MOVLW	10
$01DD	$00F4			MOVWF	STACK_4
$01DE	$01F5			CLRF	STACK_4+1
$01DF	$0850			MOVF	FARG_WordToStr+0, 0
$01E0	$00F0			MOVWF	STACK_0
$01E1	$0851			MOVF	FARG_WordToStr+1, 0
$01E2	$00F1			MOVWF	STACK_0+1
$01E3	$226C			CALL	_div_16x16_u
$01E4	$0870			MOVF	STACK_0, 0
$01E5	$00D0			MOVWF	FARG_WordToStr+0
$01E6	$0871			MOVF	STACK_0+1, 0
$01E7	$00D1			MOVWF	FARG_WordToStr+1
$01E8	$03D3			DECF	WordToStr_pos_L0, 1
$01E9	$29BF			GOTO	L_WordToStr_4
$01EA	$	L_WordToStr_5:
$01EA	$0008			RETURN
$0004	$	_main:
$0004	$303C			MOVLW	60
$0005	$1303			BCF	STATUS, RP1
$0006	$1283			BCF	STATUS, RP0
$0007	$00AA			MOVWF	lstr1_ReflectTest+0
$0008	$303C			MOVLW	60
$0009	$00AB			MOVWF	lstr1_ReflectTest+1
$000A	$3020			MOVLW	32
$000B	$00AC			MOVWF	lstr1_ReflectTest+2
$000C	$3052			MOVLW	82
$000D	$00AD			MOVWF	lstr1_ReflectTest+3
$000E	$3041			MOVLW	65
$000F	$00AE			MOVWF	lstr1_ReflectTest+4
$0010	$3034			MOVLW	52
$0011	$00AF			MOVWF	lstr1_ReflectTest+5
$0012	$3020			MOVLW	32
$0013	$00B0			MOVWF	lstr1_ReflectTest+6
$0014	$303E			MOVLW	62
$0015	$00B1			MOVWF	lstr1_ReflectTest+7
$0016	$303E			MOVLW	62
$0017	$00B2			MOVWF	lstr1_ReflectTest+8
$0018	$3020			MOVLW	32
$0019	$00B3			MOVWF	lstr1_ReflectTest+9
$001A	$3053			MOVLW	83
$001B	$00B4			MOVWF	lstr1_ReflectTest+10
$001C	$3074			MOVLW	116
$001D	$00B5			MOVWF	lstr1_ReflectTest+11
$001E	$3061			MOVLW	97
$001F	$00B6			MOVWF	lstr1_ReflectTest+12
$0020	$3072			MOVLW	114
$0021	$00B7			MOVWF	lstr1_ReflectTest+13
$0022	$3074			MOVLW	116
$0023	$00B8			MOVWF	lstr1_ReflectTest+14
$0024	$01B9			CLRF	lstr1_ReflectTest+15
$0025	$3053			MOVLW	83
$0026	$00BA			MOVWF	lstr2_ReflectTest+0
$0027	$3045			MOVLW	69
$0028	$00BB			MOVWF	lstr2_ReflectTest+1
$0029	$304E			MOVLW	78
$002A	$00BC			MOVWF	lstr2_ReflectTest+2
$002B	$3053			MOVLW	83
$002C	$00BD			MOVWF	lstr2_ReflectTest+3
$002D	$304F			MOVLW	79
$002E	$00BE			MOVWF	lstr2_ReflectTest+4
$002F	$3052			MOVLW	82
$0030	$00BF			MOVWF	lstr2_ReflectTest+5
$0031	$3030			MOVLW	48
$0032	$00C0			MOVWF	lstr2_ReflectTest+6
$0033	$3020			MOVLW	32
$0034	$00C1			MOVWF	lstr2_ReflectTest+7
$0035	$303D			MOVLW	61
$0036	$00C2			MOVWF	lstr2_ReflectTest+8
$0037	$3020			MOVLW	32
$0038	$00C3			MOVWF	lstr2_ReflectTest+9
$0039	$01C4			CLRF	lstr2_ReflectTest+10
$003A	$3053			MOVLW	83
$003B	$00C5			MOVWF	lstr3_ReflectTest+0
$003C	$3045			MOVLW	69
$003D	$00C6			MOVWF	lstr3_ReflectTest+1
$003E	$304E			MOVLW	78
$003F	$00C7			MOVWF	lstr3_ReflectTest+2
$0040	$3053			MOVLW	83
$0041	$00C8			MOVWF	lstr3_ReflectTest+3
$0042	$304F			MOVLW	79
$0043	$00C9			MOVWF	lstr3_ReflectTest+4
$0044	$3052			MOVLW	82
$0045	$00CA			MOVWF	lstr3_ReflectTest+5
$0046	$3031			MOVLW	49
$0047	$00CB			MOVWF	lstr3_ReflectTest+6
$0048	$3020			MOVLW	32
$0049	$00CC			MOVWF	lstr3_ReflectTest+7
$004A	$303D			MOVLW	61
$004B	$00CD			MOVWF	lstr3_ReflectTest+8
$004C	$3020			MOVLW	32
$004D	$00CE			MOVWF	lstr3_ReflectTest+9
$004E	$01CF			CLRF	lstr3_ReflectTest+10
;ReflectTest.c,25 :: 		void main()
;ReflectTest.c,27 :: 		Lcd_Init(&PORTD);                // Init LCD Port
$004F	$3008			MOVLW	PORTD
$0050	$00D0			MOVWF	FARG_Lcd_Init+0
$0051	$214A			CALL	_Lcd_Init
;ReflectTest.c,28 :: 		Lcd_Cmd(LCD_CURSOR_OFF);         // LCD cursor off
$0052	$300C			MOVLW	12
$0053	$00D6			MOVWF	FARG_Lcd_Cmd+0
$0054	$21EB			CALL	_Lcd_Cmd
;ReflectTest.c,29 :: 		Lcd_Cmd(LCD_CLEAR);
$0055	$3001			MOVLW	1
$0056	$00D6			MOVWF	FARG_Lcd_Cmd+0
$0057	$21EB			CALL	_Lcd_Cmd
;ReflectTest.c,31 :: 		Lcd_Out(1,1, "<< RA4 >> Start");
$0058	$3001			MOVLW	1
$0059	$00D0			MOVWF	FARG_LCD_Out+0
$005A	$3001			MOVLW	1
$005B	$00D1			MOVWF	FARG_LCD_Out+1
$005C	$302A			MOVLW	lstr1_ReflectTest
$005D	$00D2			MOVWF	FARG_LCD_Out+2
$005E	$2229			CALL	_LCD_Out
;ReflectTest.c,32 :: 		while(PORTA.F4==1);
$005F	$	L_main_11:
$005F	$3000			MOVLW	0
$0060	$1A05			BTFSC	PORTA, 4
$0061	$3001			MOVLW	1
$0062	$00F2			MOVWF	STACK_2
$0063	$0872			MOVF	STACK_2, 0
$0064	$3A01			XORLW	1
$0065	$1903			BTFSC	STATUS, Z
$0066	$285F			GOTO	L_main_11
$0067	$	L_main_12:
;ReflectTest.c,38 :: 		Lcd_Cmd(LCD_CLEAR);
$0067	$3001			MOVLW	1
$0068	$00D6			MOVWF	FARG_Lcd_Cmd+0
$0069	$21EB			CALL	_Lcd_Cmd
;ReflectTest.c,39 :: 		Lcd_Out(1,1,"SENSOR0 = ");       // Show Text Line1
$006A	$3001			MOVLW	1
$006B	$00D0			MOVWF	FARG_LCD_Out+0
$006C	$3001			MOVLW	1
$006D	$00D1			MOVWF	FARG_LCD_Out+1
$006E	$303A			MOVLW	lstr2_ReflectTest
$006F	$00D2			MOVWF	FARG_LCD_Out+2
$0070	$2229			CALL	_LCD_Out
;ReflectTest.c,40 :: 		Lcd_Out(2,1,"SENSOR1 = ");       // Line2
$0071	$3002			MOVLW	2
$0072	$00D0			MOVWF	FARG_LCD_Out+0
$0073	$3001			MOVLW	1
$0074	$00D1			MOVWF	FARG_LCD_Out+1
$0075	$3045			MOVLW	lstr3_ReflectTest
$0076	$00D2			MOVWF	FARG_LCD_Out+2
$0077	$2229			CALL	_LCD_Out
;ReflectTest.c,42 :: 		while(1)
$0078	$	L_main_13:
;ReflectTest.c,44 :: 		adc= Adc_Rd(0);
$0078	$01D0			CLRF	FARG_Adc_Rd+0, 1
$0079	$20C2			CALL	_Adc_Rd
$007A	$0870			MOVF	STACK_0, 0
$007B	$00A2			MOVWF	_adc
$007C	$0871			MOVF	STACK_0+1, 0
$007D	$00A3			MOVWF	_adc+1
;ReflectTest.c,45 :: 		WordToStr(adc,txt);           // Convert to ASCII
$007E	$0870			MOVF	STACK_0, 0
$007F	$00D0			MOVWF	FARG_WordToStr+0
$0080	$0871			MOVF	STACK_0+1, 0
$0081	$00D1			MOVWF	FARG_WordToStr+1
$0082	$3024			MOVLW	_txt
$0083	$00D2			MOVWF	FARG_WordToStr+2
$0084	$2196			CALL	_WordToStr
;ReflectTest.c,46 :: 		Lcd_Out(1,10,txt);            // Show on LCD Line1
$0085	$3001			MOVLW	1
$0086	$00D0			MOVWF	FARG_LCD_Out+0
$0087	$300A			MOVLW	10
$0088	$00D1			MOVWF	FARG_LCD_Out+1
$0089	$3024			MOVLW	_txt
$008A	$00D2			MOVWF	FARG_LCD_Out+2
$008B	$2229			CALL	_LCD_Out
;ReflectTest.c,47 :: 		adc= Adc_Rd(1);
$008C	$3001			MOVLW	1
$008D	$00D0			MOVWF	FARG_Adc_Rd+0
$008E	$20C2			CALL	_Adc_Rd
$008F	$0870			MOVF	STACK_0, 0
$0090	$00A2			MOVWF	_adc
$0091	$0871			MOVF	STACK_0+1, 0
$0092	$00A3			MOVWF	_adc+1
;ReflectTest.c,48 :: 		WordToStr(adc,txt);           // Convert to ASCII
$0093	$0870			MOVF	STACK_0, 0
$0094	$00D0			MOVWF	FARG_WordToStr+0
$0095	$0871			MOVF	STACK_0+1, 0
$0096	$00D1			MOVWF	FARG_WordToStr+1
$0097	$3024			MOVLW	_txt
$0098	$00D2			MOVWF	FARG_WordToStr+2
$0099	$2196			CALL	_WordToStr
;ReflectTest.c,49 :: 		Lcd_Out(2,10,txt);            // Show on LCD Line2
$009A	$3002			MOVLW	2
$009B	$00D0			MOVWF	FARG_LCD_Out+0
$009C	$300A			MOVLW	10
$009D	$00D1			MOVWF	FARG_LCD_Out+1
$009E	$3024			MOVLW	_txt
$009F	$00D2			MOVWF	FARG_LCD_Out+2
$00A0	$2229			CALL	_LCD_Out
;ReflectTest.c,50 :: 		Delay_ms(100);
$00A1	$3003			MOVLW	3
$00A2	$00FC			MOVWF	STACK_12
$00A3	$30FF			MOVLW	255
$00A4	$00FB			MOVWF	STACK_11
$00A5	$30FF			MOVLW	255
$00A6	$00FA			MOVWF	STACK_10
$00A7	$0BFC			DECFSZ	STACK_12, F
$00A8	$28AA			GOTO	$+2
$00A9	$28B1			GOTO	$+8
$00AA	$0BFB			DECFSZ	STACK_11, F
$00AB	$28AD			GOTO	$+2
$00AC	$28B0			GOTO	$+4
$00AD	$0BFA			DECFSZ	STACK_10, F
$00AE	$28AD			GOTO	$-1
$00AF	$28AA			GOTO	$-5
$00B0	$28A7			GOTO	$-9
$00B1	$308C			MOVLW	140
$00B2	$00FB			MOVWF	STACK_11
$00B3	$30FF			MOVLW	255
$00B4	$00FA			MOVWF	STACK_10
$00B5	$0BFB			DECFSZ	STACK_11, F
$00B6	$28B8			GOTO	$+2
$00B7	$28BB			GOTO	$+4
$00B8	$0BFA			DECFSZ	STACK_10, F
$00B9	$28B8			GOTO	$-1
$00BA	$28B5			GOTO	$-5
$00BB	$30A1			MOVLW	161
$00BC	$00FA			MOVWF	STACK_10
$00BD	$0BFA			DECFSZ	STACK_10, F
$00BE	$28BD			GOTO	$-1
$00BF	$0000			NOP
;ReflectTest.c,51 :: 		}
$00C0	$2878			GOTO	L_main_13
;ReflectTest.c,52 :: 		}
$00C1	$28C1			GOTO	$


//** Procedures locations **
//ADDRESS		PROCEDURE
//----------------------------------------------
$0004		main
$00C2		Adc_Rd
$014A		Lcd_Init
$0196		WordToStr
$01EB		Lcd_Cmd
$0229		LCD_Out
$026C		Div_16x16_U
$0289		Delay_5500us
$029A		Lcd_Chr_CP
$02A3		Delay_1us
$02AB		Delay_50us


//** Labels locations **
//ADDRESS		LABEL
//----------------------------------------------
$0004		_main:
$005F		L_main_11:
$0067		L_main_12:
$0078		L_main_13:
$00C2		_Adc_Rd:
$00CC		L10_ex_L_Adc_Rd_2:
$00D1		L_Adc_Rd_15:
$00D7		L_Adc_Rd_16:
$00DB		L_Adc_Rd_2:
$00E3		L_Adc_Rd_4:
$00EC		L33_ex_L_Adc_Rd_8:
$00F4		L_Adc_Rd_17:
$00FA		L_Adc_Rd_18:
$00FD		L_Adc_Rd_3:
$00FD		L_Adc_Rd_5:
$00FD		L_Adc_Rd_8:
$0105		L_Adc_Rd_19:
$010B		L_Adc_Rd_20:
$0116		L_Adc_Rd_21:
$011C		L_Adc_Rd_22:
$0125		L_Adc_Rd_9:
$0127		L_Adc_Rd_10:
$012D		L_Adc_Rd_23:
$0134		L_Adc_Rd_24:
$013A		L_Adc_Rd_25:
$0140		L_Adc_Rd_26:
$014A		_Lcd_Init:
$0196		_WordToStr:
$01BF		L_WordToStr_4:
$01C5		L_WordToStr_51:
$01EA		L_WordToStr_5:
$01EB		_Lcd_Cmd:
$01F2		L_Lcd_Cmd_0:
$0205		L_Lcd_Cmd_1:
$0206		L_Lcd_Cmd_2:
$020B		L_Lcd_Cmd_3:
$021E		L_Lcd_Cmd_4:
$021F		L_Lcd_Cmd_5:
$0227		L_Lcd_Cmd_6:
$0228		L_Lcd_Cmd_7:
$0229		_LCD_Out:
$022A		L_LCD_Out_19:
$022F		L_LCD_Out_20:
$0232		L_LCD_Out_21:
$0235		L_LCD_Out_22:
$0238		L_LCD_Out_23:
$023B		L_LCD_Out_17:
$024E		L_LCD_Out_18:
$0259		L_LCD_Out_24:
$0269		L_LCD_Out_25:
$026C		_Div_16x16_U:
$0289		_Delay_5500us:
$029A		_Lcd_Chr_CP:
$02A3		_Delay_1us:
$02AB		_Delay_50us:


//** Variables locations **
//ADDRESS		VARIABLE
//----------------------------------------------
$0000		INDF
$0002		PCL
$0003		STATUS
$0004		FSR
$0005		PORTA
$0008		PORTD
$000A		PCLATH
$001E		ADRESH
$001F		ADCON0
$0020		LCD_port_address
$0021		LCD_cmd_status
$0022		_adc
$0024		_txt
$002A		lstr1_ReflectTest
$003A		lstr2_ReflectTest
$0045		lstr3_ReflectTest
$0050		FARG_Adc_Rd+0
$0050		FARG_Lcd_Init+0
$0050		FARG_LCD_Out+0
$0050		FARG_WordToStr+0
$0051		
$0051		FARG_LCD_Out+1
$0052		FARG_LCD_Out+2
$0052		FARG_WordToStr+2
$0053		LCD_Out_i_L0
$0053		WordToStr_pos_L0
$0054		
$0055		FARG_Lcd_Chr_CP+0
$0056		FARG_Lcd_Cmd+0
$0070		STACK_0
$0071		STACK_1
$0072		STACK_2
$0073		STACK_3
$0074		STACK_4
$0075		STACK_5
$0076		STACK_6
$0077		STACK_7
$0078		STACK_8
$0079		STACK_9
$007A		STACK_10
$007B		STACK_11
$007C		STACK_12
$007D		STACK_13
$007E		STACK_14
$007F		STACK_15
$0085		TRISA
$0089		TRISE
$009E		ADRESL
$0188		ANSEL


