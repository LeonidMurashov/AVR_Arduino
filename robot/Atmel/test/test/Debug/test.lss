
test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000154  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000100  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000154  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000184  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000038  00000000  00000000  000001c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000377  00000000  00000000  000001fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000001b0  00000000  00000000  00000573  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000025d  00000000  00000000  00000723  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000054  00000000  00000000  00000980  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000019d  00000000  00000000  000009d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000015a  00000000  00000000  00000b71  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000058  00000000  00000000  00000ccb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	4b c0       	rjmp	.+150    	; 0x9c <__bad_interrupt>
   6:	00 00       	nop
   8:	49 c0       	rjmp	.+146    	; 0x9c <__bad_interrupt>
   a:	00 00       	nop
   c:	47 c0       	rjmp	.+142    	; 0x9c <__bad_interrupt>
   e:	00 00       	nop
  10:	45 c0       	rjmp	.+138    	; 0x9c <__bad_interrupt>
  12:	00 00       	nop
  14:	43 c0       	rjmp	.+134    	; 0x9c <__bad_interrupt>
  16:	00 00       	nop
  18:	41 c0       	rjmp	.+130    	; 0x9c <__bad_interrupt>
  1a:	00 00       	nop
  1c:	3f c0       	rjmp	.+126    	; 0x9c <__bad_interrupt>
  1e:	00 00       	nop
  20:	3d c0       	rjmp	.+122    	; 0x9c <__bad_interrupt>
  22:	00 00       	nop
  24:	3b c0       	rjmp	.+118    	; 0x9c <__bad_interrupt>
  26:	00 00       	nop
  28:	39 c0       	rjmp	.+114    	; 0x9c <__bad_interrupt>
  2a:	00 00       	nop
  2c:	37 c0       	rjmp	.+110    	; 0x9c <__bad_interrupt>
  2e:	00 00       	nop
  30:	35 c0       	rjmp	.+106    	; 0x9c <__bad_interrupt>
  32:	00 00       	nop
  34:	33 c0       	rjmp	.+102    	; 0x9c <__bad_interrupt>
  36:	00 00       	nop
  38:	31 c0       	rjmp	.+98     	; 0x9c <__bad_interrupt>
  3a:	00 00       	nop
  3c:	2f c0       	rjmp	.+94     	; 0x9c <__bad_interrupt>
  3e:	00 00       	nop
  40:	2d c0       	rjmp	.+90     	; 0x9c <__bad_interrupt>
  42:	00 00       	nop
  44:	2b c0       	rjmp	.+86     	; 0x9c <__bad_interrupt>
  46:	00 00       	nop
  48:	29 c0       	rjmp	.+82     	; 0x9c <__bad_interrupt>
  4a:	00 00       	nop
  4c:	27 c0       	rjmp	.+78     	; 0x9c <__bad_interrupt>
  4e:	00 00       	nop
  50:	25 c0       	rjmp	.+74     	; 0x9c <__bad_interrupt>
  52:	00 00       	nop
  54:	23 c0       	rjmp	.+70     	; 0x9c <__bad_interrupt>
  56:	00 00       	nop
  58:	21 c0       	rjmp	.+66     	; 0x9c <__bad_interrupt>
  5a:	00 00       	nop
  5c:	1f c0       	rjmp	.+62     	; 0x9c <__bad_interrupt>
  5e:	00 00       	nop
  60:	1d c0       	rjmp	.+58     	; 0x9c <__bad_interrupt>
  62:	00 00       	nop
  64:	1b c0       	rjmp	.+54     	; 0x9c <__bad_interrupt>
  66:	00 00       	nop
  68:	19 c0       	rjmp	.+50     	; 0x9c <__bad_interrupt>
  6a:	00 00       	nop
  6c:	17 c0       	rjmp	.+46     	; 0x9c <__bad_interrupt>
  6e:	00 00       	nop
  70:	15 c0       	rjmp	.+42     	; 0x9c <__bad_interrupt>
  72:	00 00       	nop
  74:	13 c0       	rjmp	.+38     	; 0x9c <__bad_interrupt>
  76:	00 00       	nop
  78:	11 c0       	rjmp	.+34     	; 0x9c <__bad_interrupt>
  7a:	00 00       	nop
  7c:	0f c0       	rjmp	.+30     	; 0x9c <__bad_interrupt>
  7e:	00 00       	nop
  80:	0d c0       	rjmp	.+26     	; 0x9c <__bad_interrupt>
  82:	00 00       	nop
  84:	0b c0       	rjmp	.+22     	; 0x9c <__bad_interrupt>
  86:	00 00       	nop
  88:	09 c0       	rjmp	.+18     	; 0x9c <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61
  98:	02 d0       	rcall	.+4      	; 0x9e <main>
  9a:	30 c0       	rjmp	.+96     	; 0xfc <_exit>

0000009c <__bad_interrupt>:
  9c:	b1 cf       	rjmp	.-158    	; 0x0 <__vectors>

0000009e <main>:

int main(void)
{
    
	//DDRA = 0b00011111; // 1 - выход 0 - вход
    DDRA = 0b11111111;
  9e:	8f ef       	ldi	r24, 0xFF	; 255
  a0:	81 b9       	out	0x01, r24	; 1
	DDRB = 0b11100000;
  a2:	90 ee       	ldi	r25, 0xE0	; 224
  a4:	94 b9       	out	0x04, r25	; 4
	//DDRB = 0b11111111;
	DDRC = 0b00000000;
  a6:	17 b8       	out	0x07, r1	; 7
	DDRD = 0b11111111;
  a8:	8a b9       	out	0x0a, r24	; 10
	long long i = 0;
	long long TIME = 300;
	PORTA=0;
  aa:	12 b8       	out	0x02, r1	; 2
		PORTA=1023;
		_delay_ms(1000);*/
			
		
		
		PORTA=1023;
  ac:	ef ef       	ldi	r30, 0xFF	; 255
		for(int j = 0; j<port ; j++)_delay_us(1);
  ae:	50 e0       	ldi	r21, 0x00	; 0
  b0:	40 e0       	ldi	r20, 0x00	; 0
		PORTA = 0; //// здесь 0
		for(int j = 0; j<255-port ; j++)_delay_us(1);
  b2:	6f ef       	ldi	r22, 0xFF	; 255
  b4:	70 e0       	ldi	r23, 0x00	; 0
		PORTA=0;
		for(int j = 0; j<PINC; j++)_delay_ms(1);*/
		
			//_delay_ms(3000);
	//	PORTA = 0;
		int port = PINC;
  b6:	26 b1       	in	r18, 0x06	; 6
  b8:	30 e0       	ldi	r19, 0x00	; 0
		PORTA=1023;
		_delay_ms(1000);*/
			
		
		
		PORTA=1023;
  ba:	e2 b9       	out	0x02, r30	; 2
		for(int j = 0; j<port ; j++)_delay_us(1);
  bc:	12 16       	cp	r1, r18
  be:	13 06       	cpc	r1, r19
  c0:	54 f4       	brge	.+20     	; 0xd6 <main+0x38>
  c2:	85 2f       	mov	r24, r21
  c4:	94 2f       	mov	r25, r20
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  c6:	f6 e0       	ldi	r31, 0x06	; 6
  c8:	fa 95       	dec	r31
  ca:	f1 f7       	brne	.-4      	; 0xc8 <main+0x2a>
  cc:	00 c0       	rjmp	.+0      	; 0xce <main+0x30>
  ce:	01 96       	adiw	r24, 0x01	; 1
  d0:	28 17       	cp	r18, r24
  d2:	39 07       	cpc	r19, r25
  d4:	c1 f7       	brne	.-16     	; 0xc6 <main+0x28>
		PORTA = 0; //// здесь 0
  d6:	12 b8       	out	0x02, r1	; 2
		for(int j = 0; j<255-port ; j++)_delay_us(1);
  d8:	cb 01       	movw	r24, r22
  da:	82 1b       	sub	r24, r18
  dc:	93 0b       	sbc	r25, r19
  de:	9c 01       	movw	r18, r24
  e0:	18 16       	cp	r1, r24
  e2:	19 06       	cpc	r1, r25
  e4:	44 f7       	brge	.-48     	; 0xb6 <main+0x18>
  e6:	85 2f       	mov	r24, r21
  e8:	94 2f       	mov	r25, r20
  ea:	f6 e0       	ldi	r31, 0x06	; 6
  ec:	fa 95       	dec	r31
  ee:	f1 f7       	brne	.-4      	; 0xec <main+0x4e>
  f0:	00 c0       	rjmp	.+0      	; 0xf2 <main+0x54>
  f2:	01 96       	adiw	r24, 0x01	; 1
  f4:	82 17       	cp	r24, r18
  f6:	93 07       	cpc	r25, r19
  f8:	c1 f7       	brne	.-16     	; 0xea <main+0x4c>
  fa:	dd cf       	rjmp	.-70     	; 0xb6 <main+0x18>

000000fc <_exit>:
  fc:	f8 94       	cli

000000fe <__stop_program>:
  fe:	ff cf       	rjmp	.-2      	; 0xfe <__stop_program>
