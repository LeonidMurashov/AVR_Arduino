
StreetLights.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001aa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000156  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001aa  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001dc  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  0000021c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000c3b  00000000  00000000  0000023c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000a78  00000000  00000000  00000e77  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000033d  00000000  00000000  000018ef  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00001c2c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000522  00000000  00000000  00001c50  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001a9  00000000  00000000  00002172  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  0000231b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 56 00 	jmp	0xac	; 0xac <__ctors_end>
   4:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
   8:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
   c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  10:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  14:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  18:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  1c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  20:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  24:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  28:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  2c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  30:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  34:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  38:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  3c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  40:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  44:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  48:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  4c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  50:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  54:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  58:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  5c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  60:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  64:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  68:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  6c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  70:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  74:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  78:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  7c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  80:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  84:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  88:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  8c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  90:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  94:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  98:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  9c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  a0:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  a4:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  a8:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>

000000ac <__ctors_end>:
  ac:	11 24       	eor	r1, r1
  ae:	1f be       	out	0x3f, r1	; 63
  b0:	cf ef       	ldi	r28, 0xFF	; 255
  b2:	da e0       	ldi	r29, 0x0A	; 10
  b4:	de bf       	out	0x3e, r29	; 62
  b6:	cd bf       	out	0x3d, r28	; 61
  b8:	0e 94 62 00 	call	0xc4	; 0xc4 <main>
  bc:	0c 94 a9 00 	jmp	0x152	; 0x152 <_exit>

000000c0 <__bad_interrupt>:
  c0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000c4 <main>:
#include <util/delay.h>


int main(void)
{
	DDRB = 0xFF;
  c4:	8f ef       	ldi	r24, 0xFF	; 255
  c6:	84 b9       	out	0x04, r24	; 4
    /* Replace with your application code */
    while (1) 
    {
	    PORTB = 0b00000001;
  c8:	51 e0       	ldi	r21, 0x01	; 1
		_delay_ms(10000);
		PORTB = 0b00000011;
  ca:	43 e0       	ldi	r20, 0x03	; 3
		_delay_ms(2000);
		PORTB = 0b00000100;
  cc:	24 e0       	ldi	r18, 0x04	; 4
			PORTB = 0b00000000;
			_delay_ms(500);
			PORTB = 0b00000100;
			_delay_ms(500);
		}
		PORTB = 0b00000010;
  ce:	32 e0       	ldi	r19, 0x02	; 2
{
	DDRB = 0xFF;
    /* Replace with your application code */
    while (1) 
    {
	    PORTB = 0b00000001;
  d0:	55 b9       	out	0x05, r21	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  d2:	6f ef       	ldi	r22, 0xFF	; 255
  d4:	73 ed       	ldi	r23, 0xD3	; 211
  d6:	80 e3       	ldi	r24, 0x30	; 48
  d8:	61 50       	subi	r22, 0x01	; 1
  da:	70 40       	sbci	r23, 0x00	; 0
  dc:	80 40       	sbci	r24, 0x00	; 0
  de:	e1 f7       	brne	.-8      	; 0xd8 <main+0x14>
  e0:	00 c0       	rjmp	.+0      	; 0xe2 <main+0x1e>
  e2:	00 00       	nop
		_delay_ms(10000);
		PORTB = 0b00000011;
  e4:	45 b9       	out	0x05, r20	; 5
  e6:	9f ef       	ldi	r25, 0xFF	; 255
  e8:	e3 ec       	ldi	r30, 0xC3	; 195
  ea:	69 e0       	ldi	r22, 0x09	; 9
  ec:	91 50       	subi	r25, 0x01	; 1
  ee:	e0 40       	sbci	r30, 0x00	; 0
  f0:	60 40       	sbci	r22, 0x00	; 0
  f2:	e1 f7       	brne	.-8      	; 0xec <main+0x28>
  f4:	00 c0       	rjmp	.+0      	; 0xf6 <main+0x32>
  f6:	00 00       	nop
		_delay_ms(2000);
		PORTB = 0b00000100;
  f8:	25 b9       	out	0x05, r18	; 5
  fa:	7f ef       	ldi	r23, 0xFF	; 255
  fc:	8b e4       	ldi	r24, 0x4B	; 75
  fe:	9d e1       	ldi	r25, 0x1D	; 29
 100:	71 50       	subi	r23, 0x01	; 1
 102:	80 40       	sbci	r24, 0x00	; 0
 104:	90 40       	sbci	r25, 0x00	; 0
 106:	e1 f7       	brne	.-8      	; 0x100 <main+0x3c>
 108:	00 c0       	rjmp	.+0      	; 0x10a <main+0x46>
 10a:	00 00       	nop
 10c:	83 e0       	ldi	r24, 0x03	; 3
 10e:	90 e0       	ldi	r25, 0x00	; 0
		_delay_ms(6000);
		for(int i = 0; i < 3; i++)
		{
			PORTB = 0b00000000;
 110:	15 b8       	out	0x05, r1	; 5
 112:	ef ef       	ldi	r30, 0xFF	; 255
 114:	60 e7       	ldi	r22, 0x70	; 112
 116:	72 e0       	ldi	r23, 0x02	; 2
 118:	e1 50       	subi	r30, 0x01	; 1
 11a:	60 40       	sbci	r22, 0x00	; 0
 11c:	70 40       	sbci	r23, 0x00	; 0
 11e:	e1 f7       	brne	.-8      	; 0x118 <main+0x54>
 120:	00 c0       	rjmp	.+0      	; 0x122 <main+0x5e>
 122:	00 00       	nop
			_delay_ms(500);
			PORTB = 0b00000100;
 124:	25 b9       	out	0x05, r18	; 5
 126:	ef ef       	ldi	r30, 0xFF	; 255
 128:	60 e7       	ldi	r22, 0x70	; 112
 12a:	72 e0       	ldi	r23, 0x02	; 2
 12c:	e1 50       	subi	r30, 0x01	; 1
 12e:	60 40       	sbci	r22, 0x00	; 0
 130:	70 40       	sbci	r23, 0x00	; 0
 132:	e1 f7       	brne	.-8      	; 0x12c <main+0x68>
 134:	00 c0       	rjmp	.+0      	; 0x136 <main+0x72>
 136:	00 00       	nop
 138:	01 97       	sbiw	r24, 0x01	; 1
		_delay_ms(10000);
		PORTB = 0b00000011;
		_delay_ms(2000);
		PORTB = 0b00000100;
		_delay_ms(6000);
		for(int i = 0; i < 3; i++)
 13a:	51 f7       	brne	.-44     	; 0x110 <main+0x4c>
			PORTB = 0b00000000;
			_delay_ms(500);
			PORTB = 0b00000100;
			_delay_ms(500);
		}
		PORTB = 0b00000010;
 13c:	35 b9       	out	0x05, r19	; 5
 13e:	8f ef       	ldi	r24, 0xFF	; 255
 140:	97 e8       	ldi	r25, 0x87	; 135
 142:	e3 e1       	ldi	r30, 0x13	; 19
 144:	81 50       	subi	r24, 0x01	; 1
 146:	90 40       	sbci	r25, 0x00	; 0
 148:	e0 40       	sbci	r30, 0x00	; 0
 14a:	e1 f7       	brne	.-8      	; 0x144 <main+0x80>
 14c:	00 c0       	rjmp	.+0      	; 0x14e <main+0x8a>
 14e:	00 00       	nop
 150:	bf cf       	rjmp	.-130    	; 0xd0 <main+0xc>

00000152 <_exit>:
 152:	f8 94       	cli

00000154 <__stop_program>:
 154:	ff cf       	rjmp	.-2      	; 0x154 <__stop_program>
